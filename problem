 class  a implements IPlayersFinder {
    public  java.awt.Point[] findPlayers(String[] photo, int team, int threshold) {
 
        char team_ = (char) (team + 48); // convert it to char
        int counter_Players = 0;
        int m = photo.length;
        int n = photo[0].length();
        char[][] array = new char[m][n];
        java.awt.Point[] players = new java.awt.Point[m * n];
        char[][] temp = new char[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                temp[i][j] = ' ';
                array[i][j] = ' ';
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (photo[i].charAt(j) == team_) {
                    array[i][j] = photo[i].charAt(j);
                }
            }
        }
        boolean isinterrupt = true ;
        for(int y= 0 ; y<m;y++){
            for(int t = 0 ; t<n;t++){
                if(array[y][t]==team_)
                    isinterrupt=false;
            }
        }
        if(isinterrupt){
            java.awt.Point[] mohamed = new java.awt.Point[1] ;
            return mohamed ;
        }
        int i = 0, j = 0;
        while (true && i < m && j < n) {
            boolean isFound = false;
            for (i = i; i < m; i++) {
                for (j = j; j < n; j++) {
                    if (array[i][j] == team_) {
                        isFound = true;
                        temp[i][j] = team_;
                        if (i != m - 1) {
                            if (array[i + 1][j] == team_)
                                temp[i + 1][j] = team_;
                        }
                        if (j != n - 1) {
                            if (array[i][j + 1] == team_)
                                temp[i][j + 1] = team_;
                        }
                        if (i != 0) {
                            if (array[i - 1][j] == team_)
                                temp[i - 1][j] = team_;
                        }
                        if (j != 0) {
                            if (array[i][j - 1] == team_)
                                temp[i][j - 1] = team_;
                        }
                        array[i][j] = ' ';
                    }
                    if (isFound)
                        break;
                }
                if (isFound)
                    break;
                if (j == n)
                    j = 0;
            }
            boolean isHere = false;
            for (int i1 = 0; i1 < m; i1++) {
                for (int j1 = 0; j1 < n; j1++) {
                    if (array[i1][j1] == team_&&temp[i1][j1] == team_ ) {
                        isHere = true;
                        i = i1;
                        j = j1;
                        break;
                    }
                    if (isHere)
                        break;
                }
                if (isHere)
                    break;
            }
            if (isHere == false) {
                int count = 0;
                for (int i1 = 0; i1 < m; i1++) {
                    for (int j1 = 0; j1 < n; j1++) {
                        if (temp[i1][j1] == team_)
                            count++;
                    }
                }
                if (count * 4 >= threshold) {
                    int[] saveI = new int[2];
                    int[] saveJ = new int[2];
                    int count2 = 0;
                    for (int i1 = 0; i1 < m; i1++) {
                        for (int j1 = 0; j1 < n; j1++) {
                            if (temp[i1][j1] == team_ && count2 == 0) {
                                saveI[0] = i1;
                                count2++;
                            }
                            if (temp[i1][j1] == team_)
                                saveI[1] = i1;
                        }
                    }
                    count2 = 0;
                    for (int j1 = 0; j1 < n; j1++) {
                        for (int i1 = 0; i1 < m; i1++) {
                            if (temp[i1][j1] == team_ && count2 == 0) {
                                saveJ[0] = j1;
                                count2++;
                            }
                            if (temp[i1][j1] == team_)
                                saveJ[1] = j1;
                        }
                    }
                    int[] borders = new int[4];
                    borders[0] = 2 * saveI[0];
                    borders[1] = 2 * saveJ[0];
                    borders[2] = 2 * saveI[1] + 2;
                    borders[3] = 2 * saveJ[1] + 2;
                    int z = borders[1] + (borders[3] - borders[1]) / 2;
                    int v = borders[0] + (borders[2] - borders[0]) / 2;
                    java.awt.Point ahmed = new java.awt.Point(z, v);
                    players[counter_Players] = ahmed;
                    for (int i1 = 0; i1 < m; i1++) {
                        for (int j1 = 0; j1 < n; j1++) {
                            temp[i1][j1] = ' ';
                        }
                    }
                    i = 0;
                    j = 0;
                    counter_Players++;
                }
                if (count * 4 < threshold) {
                    for (int i1 = 0; i1 < m; i1++) {
                        for (int j1 = 0; j1 < n; j1++) {
                            temp[i1][j1] = ' ';
                        }
                    }
                    i = 0;
                    j = 0;
                }
            }
            boolean isEmpty = true;
            for (int i1 = 0; i1 < m; i1++) {
                for (int j1 = 0; j1 < n; j1++) {
                    if (array[i1][j1] == team_) {
                        isEmpty = false;
                    }
                }
            }
            if (isEmpty)
                break;
        }
        java.awt.Point[] end = new java.awt.Point[counter_Players];
        for (int i1 = 0; i1 < counter_Players; i1++) {
            end[i1] = players[i1];
        }
        for(int i2 = 0 ; i2<counter_Players;i2++){
            for(int j2 = 0 ; j2-1 <counter_Players ; j2++){
                if(end[j2].x>end[j2+1].x){
                    java.awt.Point okay = end[j2];
                    end[j2]=end[j2+1];
                    end[j2+1]=okay;
                }
            }
        }
        return end;
    }
}
